{% extends 'base.html.twig' %}

{% block javascripts %}
{{ parent() }}
<script>
    // Stocker le token si présent dans l'URL
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    if (token) {
        localStorage.setItem('jwtToken', token);
        // Nettoyer l'URL
        window.history.replaceState({}, document.title, window.location.pathname);
    }
</script>
{% endblock %}

{% block title %}Dashboard Admin - LUCAR Simracing{% endblock %}

{% block body %}
<div class="container mt-4">
    <h1>Dashboard Administrateur</h1>
    
    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Utilisateurs</h5>
                    <p class="card-text">Gérer les utilisateurs</p>
                    <button onclick="loadUsers()" class="btn btn-primary">Voir les utilisateurs</button>
                </div>
            </div>
            <!-- Modal pour afficher les utilisateurs -->
            <div class="modal fade" id="usersModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Liste des Utilisateurs</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Email</th>
                                            <th>Prénom</th>
                                            <th>Nom</th>
                                            <th>Rôles</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="usersTableBody">
                                        <!-- Les utilisateurs seront insérés ici -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Réservations</h5>
                    <p class="card-text">Gérer les réservations</p>
                    <a href="{{ path('admin_reservations') }}" class="btn btn-primary">Voir les réservations</a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Messages</h5>
                    <p class="card-text">Voir les messages de contact</p>
                    <a href="{{ path('admin_contacts') }}" class="btn btn-primary">Voir les messages</a>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Avis</h5>
                    <p class="card-text">Gérer les avis des utilisateurs</p>
                    <button onclick="loadAvis()" class="btn btn-primary">Voir les avis</button>
                </div>
            </div>
            <!-- Modal pour afficher les avis -->
            <div class="modal fade" id="avisModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Liste des Avis</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Utilisateur</th>
                                            <th>Note</th>
                                            <th>Commentaire</th>
                                            <th>Date</th>
                                            <th>Statut</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="avisTableBody">
                                        <!-- Les avis seront insérés ici -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Ajouter Bootstrap JS et ses dépendances -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
async function loadUsers() {
    try {
        // Récupérer le token du localStorage
        const token = localStorage.getItem('token'); // Assurez-vous que c'est 'token' et non 'jwtToken'
        
        if (!token) {
            throw new Error('Token non trouvé');
        }

        const response = await fetch('/api/admin/users', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const users = await response.json();
        console.log('Users:', users); // Pour déboguer
        displayUsers(users);
        
        // Afficher le modal
        const modal = new bootstrap.Modal(document.getElementById('usersModal'));
        modal.show();
    } catch (error) {
        console.error('Erreur détaillée:', error);
        alert(`Erreur lors du chargement des utilisateurs: ${error.message}`);
    }
}

function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';

    if (!Array.isArray(users)) {
        console.error('Les données reçues ne sont pas un tableau:', users);
        return;
    }

    users.forEach(user => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${escapeHtml(user.email)}</td>
            <td>${escapeHtml(user.firstName || '')}</td>
            <td>${escapeHtml(user.lastName || '')}</td>
            <td>${escapeHtml(Array.isArray(user.roles) ? user.roles.join(', ') : '')}</td>
            <td>
                <button class="btn btn-sm btn-warning" onclick="editUser('${escapeHtml(user.id)}')">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-danger" onclick="deleteUser('${escapeHtml(user.id)}')">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

// Fonction utilitaire pour échapper les caractères HTML
function escapeHtml(unsafe) {
    if (unsafe === null || unsafe === undefined) return '';
    return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

// Supprimer le code de gestion du token dans l'URL car nous utilisons le localStorage
document.addEventListener('DOMContentLoaded', function() {
    // Vérifier si l'utilisateur est connecté et a le rôle admin
    const token = localStorage.getItem('token');
    if (token) {
        try {
            const tokenParts = token.split('.');
            const payload = JSON.parse(atob(tokenParts[1]));
            if (!payload.roles || !payload.roles.includes('ROLE_ADMIN')) {
                window.location.href = '/';
            }
        } catch (error) {
            console.error('Erreur lors de la vérification du token:', error);
            window.location.href = '/';
        }
    } else {
        window.location.href = '/';
    }
});

// Fonction pour éditer un utilisateur
async function editUser(userId) {
    try {
        const token = localStorage.getItem('token');
        
        // Récupérer les données de l'utilisateur
        const response = await fetch(`/api/admin/users/${userId}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Erreur lors de la récupération des données');
        }

        const user = await response.json();

        // Créer et afficher le modal d'édition
        const editModal = document.createElement('div');
        editModal.className = 'modal fade';
        editModal.id = 'editUserModal';
        editModal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Modifier l'utilisateur</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editUserForm">
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" name="email" value="${escapeHtml(user.email)}" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Prénom</label>
                                <input type="text" class="form-control" name="firstName" value="${escapeHtml(user.firstName || '')}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Nom</label>
                                <input type="text" class="form-control" name="lastName" value="${escapeHtml(user.lastName || '')}">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Rôles</label>
                                <select class="form-select" name="roles" multiple>
                                    <option value="ROLE_USER" ${user.roles.includes('ROLE_USER') ? 'selected' : ''}>Utilisateur</option>
                                    <option value="ROLE_ADMIN" ${user.roles.includes('ROLE_ADMIN') ? 'selected' : ''}>Administrateur</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Nouveau mot de passe (laisser vide pour ne pas changer)</label>
                                <input type="password" class="form-control" name="password">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" onclick="saveUserChanges('${userId}')">Enregistrer</button>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(editModal);
        const modal = new bootstrap.Modal(editModal);
        modal.show();

        // Nettoyer le DOM après la fermeture
        editModal.addEventListener('hidden.bs.modal', function () {
            document.body.removeChild(editModal);
        });

    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la modification de l\'utilisateur');
    }
}

// Fonction pour sauvegarder les modifications
async function saveUserChanges(userId) {
    try {
        const form = document.getElementById('editUserForm');
        const formData = new FormData(form);
        const token = localStorage.getItem('token');

        const data = {
            email: formData.get('email'),
            firstName: formData.get('firstName'),
            lastName: formData.get('lastName'),
            roles: Array.from(formData.getAll('roles')),
            password: formData.get('password')
        };

        // Si le mot de passe est vide, le supprimer de l'objet
        if (!data.password) {
            delete data.password;
        }

        const response = await fetch(`/api/admin/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        if (!response.ok) {
            throw new Error('Erreur lors de la sauvegarde');
        }

        // Fermer le modal et recharger la liste
        bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
        loadUsers();
        alert('Utilisateur modifié avec succès');

    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la sauvegarde des modifications');
    }
}

// Fonction pour supprimer un utilisateur
async function deleteUser(userId) {
    if (confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors de la suppression');
            }

            loadUsers(); // Recharger la liste
            alert('Utilisateur supprimé avec succès');

        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la suppression de l\'utilisateur');
        }
    }
}

async function loadAvis() {
    try {
        const token = localStorage.getItem('token');
        
        if (!token) {
            throw new Error('Token non trouvé');
        }

        const response = await fetch('/api/avis', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        displayAvis(data.avis);
        
        // Afficher le modal
        const modal = new bootstrap.Modal(document.getElementById('avisModal'));
        modal.show();
    } catch (error) {
        console.error('Erreur:', error);
        alert(`Erreur lors du chargement des avis: ${error.message}`);
    }
}

function displayAvis(avis) {
    const tbody = document.getElementById('avisTableBody');
    tbody.innerHTML = '';

    avis.forEach(avis => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${escapeHtml(avis.user.email)}</td>
            <td>${escapeHtml(avis.note.toString())}/5</td>
            <td>${escapeHtml(avis.commentaire)}</td>
            <td>${new Date(avis.createdAt).toLocaleString()}</td>
            <td>
                <span class="badge ${avis.isValid ? 'bg-success' : 'bg-warning'}">
                    ${avis.isValid ? 'Validé' : 'En attente'}
                </span>
            </td>
            <td>
                ${!avis.isValid ? 
                    `<button class="btn btn-sm btn-success" onclick="validateAvis('${avis.id}')">
                        <i class="fas fa-check"></i>
                    </button>` : ''
                }
                <button class="btn btn-sm btn-danger" onclick="deleteAvis('${avis.id}')">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

async function validateAvis(avisId) {
    if (confirm('Voulez-vous valider cet avis ?')) {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/avis/${avisId}/validate`, {
                method: 'PATCH',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors de la validation');
            }

            loadAvis(); // Recharger la liste
            alert('Avis validé avec succès');

        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la validation de l\'avis');
        }
    }
}

async function deleteAvis(avisId) {
    if (confirm('Êtes-vous sûr de vouloir supprimer cet avis ?')) {
        try {
            const token = localStorage.getItem('token');
            const response = await fetch(`/api/avis/${avisId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error('Erreur lors de la suppression');
            }

            loadAvis(); // Recharger la liste
            alert('Avis supprimé avec succès');

        } catch (error) {
            console.error('Erreur:', error);
            alert('Erreur lors de la suppression de l\'avis');
        }
    }
}
</script>

<style>
.card {
    margin-bottom: 20px;
    transition: transform 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
}

.modal-dialog {
    max-width: 80%;
}

.table {
    margin-bottom: 0;
}

.btn-sm {
    padding: 0.25rem 0.5rem;
    margin: 0 2px;
}
</style>
{% endblock %} 