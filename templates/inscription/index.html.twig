{% extends 'base.html.twig' %}

{% block title %}Inscription - LUCAR Simracing{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .inscription-container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #333;
    }

    .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-submit {
        background-color: #007bff;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
        font-size: 16px;
    }

    .form-submit:hover {
        background-color: #0056b3;
    }

    .error-message {
        color: #dc3545;
        margin-top: 5px;
        font-size: 14px;
        display: none;
    }

    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
        display: none;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>
{% endblock %}

{% block body %}
<div class="inscription-container">
    <h2 class="text-center mb-4">Inscription</h2>
    
    <form id="inscription-form" method="post">
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
            <div class="error-message" id="emailError"></div>
        </div>

        <div class="form-group">
            <label for="firstName">Prénom</label>
            <input type="text" id="firstName" name="firstName" required>
            <div class="error-message" id="firstNameError"></div>
        </div>

        <div class="form-group">
            <label for="lastName">Nom</label>
            <input type="text" id="lastName" name="lastName" required>
            <div class="error-message" id="lastNameError"></div>
        </div>

        <div class="form-group">
            <label for="password">Mot de passe</label>
            <input type="password" id="password" name="password" required>
            <div class="error-message" id="passwordError"></div>
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirmer le mot de passe</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
            <div class="error-message" id="confirmPasswordError"></div>
        </div>

        <button type="submit" class="form-submit">S'inscrire</button>
    </form>
</div>

{% block javascripts %}
{{ parent() }}
<script>
document.getElementById('inscription-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    successMessage.style.display = 'none';
    errorMessage.style.display = 'none';

    // Vérification des mots de passe
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (password !== confirmPassword) {
        errorMessage.textContent = 'Les mots de passe ne correspondent pas';
        errorMessage.style.display = 'block';
        return;
    }

    // Données d'inscription
    const formData = {
        email: document.getElementById('email').value,
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        password: password
    };

    try {
        // 1. Inscription
        const registerResponse = await fetch('/api/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        if (registerResponse.ok) {
            // 2. Connexion automatique après inscription
            const loginResponse = await fetch('/api/login_check', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    username: formData.email,
                    password: formData.password
                })
            });

            const loginData = await loginResponse.json();

            if (loginResponse.ok) {
                // Stocker le token JWT
                localStorage.setItem('token', loginData.token);
                
                successMessage.textContent = 'Inscription réussie ! Redirection...';
                successMessage.style.display = 'block';
                
                // Redirection vers la page d'accueil
                setTimeout(() => {
                    window.location.href = '/';
                }, 2000);
            }
        } else {
            const data = await registerResponse.json();
            errorMessage.textContent = data.message || 'Erreur lors de l\'inscription';
            errorMessage.style.display = 'block';
        }
    } catch (error) {
        errorMessage.textContent = 'Erreur lors de l\'inscription';
        errorMessage.style.display = 'block';
        console.error('Erreur:', error);
    }
});
</script>
{% endblock %}
{% endblock %} 