<nav class="nav">
    <div class="container nav-content">
        <div class="nav-logo">
            <a href="{{ path('app_home') }}">
                <img src="{{ asset('images/logo.png') }}" alt="LUCAR">
            </a>
        </div>
        
        <button class="nav-toggle" id="navToggle">
            <i class="fas fa-bars"></i>
        </button>
        
        <div class="nav-links" id="navLinks">
            <a href="{{ path('app_home') }}" class="nav-link {% if app.request.get('_route') == 'app_home' %}active{% endif %}">Home</a>
            <a href="{{ path('app_inscription') }}" class="nav-link {% if app.request.get('_route') == 'app_inscription' %}active{% endif %}">Inscription</a>
            <a href="#" class="nav-link">Reservation</a>
            <a href="#" class="nav-link">DIY part</a>
            <a href="#" class="nav-link">Devis</a>
            <a href="#" class="nav-link">Contact</a>
            <a href="#" class="nav-link">Avis</a>
        </div>

        <div class="nav-icons">
            <a href="#" class="nav-link user-icon" id="userIcon">
                <i class="fas fa-user" id="userIconSymbol"></i>
            </a>
            <a href="#" class="nav-link">
                <i class="fas fa-shopping-cart"></i>
            </a>
        </div>
    </div>
</nav>

<style>
.nav {
    padding: 20px 0;
    background-color: #000;
}

.nav-logo {
    padding: 15px 0;
    display: flex;
    align-items: center;
}

.nav-logo img {
    height: 120px;
    width: auto;
    margin: 10px 0;
    object-fit: contain;
    transform: translateY(5px);
}

.nav-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 15px;
    min-height: 150px;
}

.nav-links a {
    color: #fff;
}

.nav-links a:hover {
    color: #ccc;
}

.nav-icons {
    display: flex;
    align-items: center;
    gap: 15px;
}

.nav-icons .user-icon {
    background-color: #222;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.nav-icons .user-icon.connected {
    background-color: #28a745;  /* Vert pour l'état connecté */
}

.nav-icons .user-icon i {
    font-size: 20px;
    color: #fff;
}

.nav-icons .user-icon:hover {
    background-color: #333;
    transform: scale(1.1);
}

.nav-icons .fa-shopping-cart {
    font-size: 20px;
    color: #fff;
}

.nav-link.active {
    color: #fff;
    font-weight: bold;
}

/* Style pour les boutons spécifiques */
.btn, 
button[type="submit"],
.btn-primary {
    color: #fff !important;
    text-decoration: none;
}

/* Bouton hamburger */
.nav-toggle {
    display: none;
    background: none;
    border: none;
    color: #fff;
    font-size: 24px;
    cursor: pointer;
    padding: 10px;
}

/* Styles responsive */
@media (max-width: 991px) {
    .nav-content {
        flex-wrap: wrap;
        min-height: auto;
    }

    .nav-logo img {
        height: 80px;  /* Logo plus petit sur mobile */
    }

    .nav-toggle {
        display: block;
    }

    .nav-links {
        display: none;  /* Caché par défaut sur mobile */
        width: 100%;
        order: 3;
        flex-direction: column;
        padding: 20px 0;
    }

    .nav-links.active {
        display: flex;
    }

    .nav-links a {
        padding: 15px 0;
        text-align: center;
        border-bottom: 1px solid #333;
    }

    .nav-icons {
        margin-left: auto;
    }
}

@media (max-width: 576px) {
    .nav-logo img {
        height: 60px;  /* Encore plus petit sur très petits écrans */
    }

    .nav-content {
        padding: 0 10px;
    }
}

/* Styles pour le popup de connexion */
.login-popup {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 1000;
    width: 250px;
    margin-top: 10px;
}

.login-popup .form-group {
    margin-bottom: 15px;
}

.login-popup input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}

.login-popup button {
    width: 100%;
    padding: 10px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-popup button:hover {
    background: #0056b3;
}

/* Style pour la position relative du conteneur de l'icône */
.nav-icons {
    position: relative;
}
</style>

<script>
// Intercepteur global pour les requêtes
document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('jwtToken');
    
    if (token) {
        // Ajouter le token à toutes les requêtes
        const originalFetch = window.fetch;
        window.fetch = function() {
            let [resource, config] = arguments;
            config = config || {};
            config.headers = config.headers || {};
            config.headers['Authorization'] = `Bearer ${token}`;
            return originalFetch(resource, config);
        };

        // Ajouter le token aux liens vers le dashboard admin
        document.querySelectorAll('a[href^="/admin"]').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                window.location.href = this.href + '?token=' + token;
            });
        });
    }
});

// Vérifier le token au chargement de chaque page admin
if (window.location.pathname.startsWith('/admin')) {
    const token = localStorage.getItem('jwtToken');
    if (!token) {
        window.location.href = '/';
    }
}

// Ajouter cette fonction en haut du script
async function redirectWithToken(url, token) {
    try {
        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/html'
            },
            credentials: 'include'
        });
        
        if (response.ok) {
            window.location.href = url;
        } else if (response.status === 401) {
            // Token invalide ou expiré
            localStorage.removeItem('token');
            window.location.href = '/';
        } else {
            console.error('Erreur de redirection:', response.status);
            window.location.href = '/';
        }
    } catch (error) {
        console.error('Erreur:', error);
        window.location.href = '/';
    }
}

// Vérifier si l'utilisateur est connecté au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userIcon = document.getElementById('userIcon');
    
    if (token) {
        userIcon.classList.add('connected');
        // Décodage du token pour vérifier le rôle
        try {
            const tokenParts = token.split('.');
            const payload = JSON.parse(atob(tokenParts[1]));
            if (payload.roles.includes('ROLE_ADMIN')) {
                userIcon.dataset.isAdmin = 'true';
            }
        } catch (error) {
            console.error('Erreur lors du décodage du token:', error);
        }
    }
});

// Gestion du clic sur l'icône utilisateur
document.getElementById('userIcon').addEventListener('click', async function(e) {
    e.preventDefault();
    const token = localStorage.getItem('token');
    
    if (!token) {
        // Si non connecté, afficher le formulaire de connexion
        const formHTML = `
            <div class="login-popup" id="loginPopup">
                <form id="loginForm">
                    <div class="form-group">
                        <input type="email" id="loginEmail" placeholder="Email" required>
                    </div>
                    <div class="form-group">
                        <input type="password" id="loginPassword" placeholder="Mot de passe" required>
                    </div>
                    <button type="submit">Se connecter</button>
                </form>
            </div>
        `;
        
        // Supprimer l'ancien popup s'il existe
        const existingPopup = document.getElementById('loginPopup');
        if (existingPopup) {
            existingPopup.remove();
        }
        
        // Insérer le nouveau formulaire
        this.insertAdjacentHTML('afterend', formHTML);
        
        // Gérer la soumission du formulaire
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            try {
                const response = await fetch('/api/login_check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username: document.getElementById('loginEmail').value,
                        password: document.getElementById('loginPassword').value
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    localStorage.setItem('token', data.token);
                    
                    // Décodage du token JWT pour vérifier le rôle
                    const tokenParts = data.token.split('.');
                    const payload = JSON.parse(atob(tokenParts[1]));
                    
                    document.getElementById('userIcon').classList.add('connected');
                    document.getElementById('loginPopup').remove();

                    if (payload.roles && payload.roles.includes('ROLE_ADMIN')) {
                        // Faire une requête préalable pour établir la session
                        try {
                            const adminResponse = await fetch('/admin/dashboard', {
                                method: 'GET',
                                headers: {
                                    'Authorization': `Bearer ${data.token}`,
                                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                                    'Content-Type': 'application/json'
                                },
                                credentials: 'include'
                            });

                            if (adminResponse.ok) {
                                window.location.href = '/admin/dashboard';
                            } else {
                                throw new Error('Accès refusé');
                            }
                        } catch (error) {
                            console.error('Erreur:', error);
                            window.location.href = '/';
                        }
                    } else {
                        window.location.href = '/';
                    }
                } else {
                    alert('Email ou mot de passe incorrect');
                }
            } catch (error) {
                alert('Erreur lors de la connexion');
                console.error('Erreur:', error);
            }
        });
    } else {
        // Si connecté, déconnexion
        localStorage.removeItem('token');
        this.classList.remove('connected');
        window.location.href = '/';
    }
});

// Fermer le popup si on clique en dehors
document.addEventListener('click', function(e) {
    const loginPopup = document.getElementById('loginPopup');
    const userIcon = document.getElementById('userIcon');
    
    if (loginPopup && !loginPopup.contains(e.target) && e.target !== userIcon) {
        loginPopup.remove();
    }
});

// Ajout du script pour le menu hamburger
document.getElementById('navToggle').addEventListener('click', function() {
    const navLinks = document.getElementById('navLinks');
    navLinks.classList.toggle('active');
});

// Fermer le menu mobile lors du clic sur un lien
document.querySelectorAll('.nav-links a').forEach(link => {
    link.addEventListener('click', () => {
        if (window.innerWidth <= 991) {
            document.getElementById('navLinks').classList.remove('active');
        }
    });
});

// Fermer le menu mobile lors du redimensionnement
window.addEventListener('resize', () => {
    if (window.innerWidth > 991) {
        document.getElementById('navLinks').classList.remove('active');
    }
});

// Ajouter au début du script
document.addEventListener('DOMContentLoaded', function() {
    // Intercepter toutes les requêtes fetch
    const originalFetch = window.fetch;
    window.fetch = function() {
        let [resource, config] = arguments;
        config = config || {};
        config.headers = config.headers || {};
        
        // Ajouter le token aux headers si disponible
        const token = localStorage.getItem('token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }
        
        return originalFetch(resource, config);
    };
});
</script> 