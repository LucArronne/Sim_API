<nav class="nav">
    <div class="container nav-content">
        <div class="nav-logo">
            <a href="{{ path('app_home') }}">
                <img src="{{ asset('images/logo.png') }}" alt="LUCAR">
            </a>
        </div>
        
        <button class="nav-toggle" id="navToggle">
            <i class="fas fa-bars"></i>
        </button>
        
        <div class="nav-links" id="navLinks">
            <a href="{{ path('app_home') }}" class="nav-link {% if app.request.get('_route') == 'app_home' %}active{% endif %}">Home</a>
            <span id="inscriptionLink">
                <a href="{{ path('app_inscription') }}" class="nav-link {% if app.request.get('_route') == 'app_inscription' %}active{% endif %}">Inscription</a>
            </span>
            <a href="{{ path('app_reservation') }}" class="nav-link {% if app.request.get('_route') == 'app_reservation' %}active{% endif %}">Reservation</a>
            <a href="{{ path('app_diy') }}" class="nav-link {% if app.request.get('_route') == 'app_diy' %}active{% endif %}">DIY part</a>
            <a href="#" class="nav-link">Devis</a>
            <a href="{{ path('contact_page') }}" class="nav-link {% if app.request.get('_route') == 'contact_page' %}active{% endif %}">Contact</a>
            <a href="{{ path('app_avis') }}" class="nav-link {% if app.request.get('_route') == 'app_avis' %}active{% endif %}">Avis</a>
            <span id="ordersLink" style="display: none;">
                <a href="{{ path('app_orders') }}" class="nav-link {% if app.request.get('_route') == 'app_orders' %}active{% endif %}">Mes commandes</a>
            </span>
        </div>

        <div class="nav-icons">
            <a href="#" class="nav-link user-icon" id="userIcon">
                <i class="fas fa-user" id="userIconSymbol"></i>
            </a>
            <a href="#" class="nav-link">
                <i class="fas fa-shopping-cart"></i>
            </a>
        </div>
    </div>
</nav>

<style>
.nav {
    padding: 20px 0;
    background-color: #000;
}

.nav-logo {
    padding: 15px 0;
    display: flex;
    align-items: center;
}

.nav-logo img {
    height: 120px;
    width: auto;
    margin: 10px 0;
    object-fit: contain;
    transform: translateY(5px);
}

.nav-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 15px;
    min-height: 150px;
}

.nav-links a {
    color: #fff;
}

.nav-links a:hover {
    color: #ccc;
}

.nav-icons {
    display: flex;
    align-items: center;
    gap: 15px;
}

.nav-icons .user-icon {
    background-color: #222;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.nav-icons .user-icon.connected {
    background-color: #28a745;  /* Vert pour l'état connecté */
}

.nav-icons .user-icon i {
    font-size: 20px;
    color: #fff;
}

.nav-icons .user-icon:hover {
    background-color: #333;
    transform: scale(1.1);
}

.nav-icons .fa-shopping-cart {
    font-size: 20px;
    color: #fff;
}

.nav-link.active {
    color: #fff;
    font-weight: bold;
}

/* Style pour les boutons spécifiques */
.btn, 
button[type="submit"],
.btn-primary {
    color: #fff !important;
    text-decoration: none;
}

/* Bouton hamburger */
.nav-toggle {
    display: none;
    background: none;
    border: none;
    color: #fff;
    font-size: 24px;
    cursor: pointer;
    padding: 10px;
}

/* Styles responsive */
@media (max-width: 991px) {
    .nav-content {
        flex-wrap: wrap;
        min-height: auto;
    }

    .nav-logo img {
        height: 80px;  /* Logo plus petit sur mobile */
    }

    .nav-toggle {
        display: block;
    }

    .nav-links {
        display: none;  /* Caché par défaut sur mobile */
        width: 100%;
        order: 3;
        flex-direction: column;
        padding: 20px 0;
    }

    .nav-links.active {
        display: flex;
    }

    .nav-links a {
        padding: 15px 0;
        text-align: center;
        border-bottom: 1px solid #333;
    }

    .nav-icons {
        margin-left: auto;
    }
}

@media (max-width: 576px) {
    .nav-logo img {
        height: 60px;  /* Encore plus petit sur très petits écrans */
    }

    .nav-content {
        padding: 0 10px;
    }
}

/* Styles pour le popup de connexion */
.login-popup {
    position: absolute;
    top: 100%;
    right: 0;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 1000;
    width: 250px;
    margin-top: 10px;
}

.login-popup .form-group {
    margin-bottom: 15px;
}

.login-popup input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
}

.login-popup button {
    width: 100%;
    padding: 10px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-popup button:hover {
    background: #0056b3;
}

/* Style pour la position relative du conteneur de l'icône */
.nav-icons {
    position: relative;
}
</style>

<script>
// Fonction pour gérer la connexion
async function handleLogin(email, password) {
    const response = await fetch('/api/login_check', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify({
            username: email,
            password: password
        })
    });

    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message || 'Identifiants invalides');
    }

    return data;
}

// Gestion du clic sur l'icône utilisateur
document.getElementById('userIcon').addEventListener('click', function(e) {
    e.preventDefault();
    
    const token = localStorage.getItem('token');
    if (token) {
        // Déconnexion
        localStorage.removeItem('token');
        this.classList.remove('connected');
        window.location.href = '/';
        return;
    }

    // Supprimer l'ancien popup s'il existe
    const existingPopup = document.getElementById('loginPopup');
    if (existingPopup) {
        existingPopup.remove();
    }

    // Créer le popup de connexion
    const formHTML = `
        <div class="login-popup" id="loginPopup">
            <h3>Connexion</h3>
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginEmail">Email</label>
                    <input type="email" id="loginEmail" placeholder="Votre email" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">Mot de passe</label>
                    <input type="password" id="loginPassword" placeholder="Votre mot de passe" required>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn-login">Se connecter</button>
                    <a href="/inscription" class="btn-register">S'inscrire</a>
                </div>
            </form>
        </div>
    `;

    this.insertAdjacentHTML('afterend', formHTML);

    // Ajouter le gestionnaire d'événements après avoir créé le formulaire
    const loginForm = document.getElementById('loginForm');
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        try {
            const data = await handleLogin(
                document.getElementById('loginEmail').value,
                document.getElementById('loginPassword').value
            );

            // Stockage du token
            localStorage.setItem('token', data.token);

            // Décodage du token
            const tokenParts = data.token.split('.');
            const payload = JSON.parse(atob(tokenParts[1]));

            // Mise à jour UI
            document.getElementById('userIcon').classList.add('connected');
            const loginPopup = document.getElementById('loginPopup');
            if (loginPopup) loginPopup.remove();

            // Redirection selon le rôle
            if (payload.roles && payload.roles.includes('ROLE_ADMIN')) {
                const adminResponse = await fetch('/admin/dashboard', {
                    headers: {
                        'Authorization': `Bearer ${data.token}`,
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (adminResponse.ok) {
                    window.location.href = '/admin/dashboard';
                } else {
                    throw new Error('Accès refusé au dashboard admin');
                }
            } else {
                window.location.href = '/';
            }

        } catch (error) {
            console.error('Erreur:', error);
            alert(error.message || 'Erreur lors de la connexion');
        }
    });
});

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const ordersLink = document.getElementById('ordersLink');
    const inscriptionLink = document.getElementById('inscriptionLink');
    
    if (token) {
        document.getElementById('userIcon').classList.add('connected');
        ordersLink.style.display = 'inline';
        inscriptionLink.style.display = 'none';
    } else {
        inscriptionLink.style.display = 'inline';
    }
});

// Fermer le popup si on clique en dehors
document.addEventListener('click', function(e) {
    const loginPopup = document.getElementById('loginPopup');
    const userIcon = document.getElementById('userIcon');
    
    if (loginPopup && !loginPopup.contains(e.target) && e.target !== userIcon) {
        loginPopup.remove();
    }
});
</script> 